# SPDX-License-Identifier: GPL-2.0-or-later
# 
# The ESP32-C6 only supports JTAG.
transport select jtag

set CPU_MAX_ADDRESS 0xFFFFFFFF
source [find bitsbytes.tcl]
source [find memory.tcl]
source [find mmr_helpers.tcl]
# Source the ESP common configuration file
source [find target/esp_common.cfg]

# Target specific registers
set EFUSE_MAC_ADDR_REG  0x600B0844

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME esp32c6
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x0000dc25
}

set _TARGETNAME $_CHIPNAME
set _CPUNAME cpu
set _TAPNAME $_CHIPNAME.$_CPUNAME

jtag newtap $_CHIPNAME $_CPUNAME -irlen 5 -expected-id $_CPUTAPID

proc esp32c6_wdt_disable { } {
    # Halt event can occur during config phase (before "init" is done).
    # Ignore it since mww commands don't work at that time.
    if { [string compare [command mode] config] == 0 } {
        return
    }

    # Timer Group 0 & 1 WDTs
    mww 0x60008064 0x50D83AA1
    mww 0x60008048 0
    mww 0x60009064 0x50D83AA1
    mww 0x60009048 0
    # LP_WDT_RTC
    mww 0x600b1c18 0x50D83AA1
    mww 0x600B1C00 0
    # LP_WDT_SWD
    mww 0x600b1c20 0x50D83AA1
    mww 0x600b1c1c 0x40000000
}

proc esp32c6_soc_reset { } {
    riscv dmi_write 0x10 0x80000001
    riscv dmi_write 0x38 0x48000
    riscv dmi_write 0x39 0x600b1034
    riscv dmi_write 0x3C 0x80000000
    # clear dmactive to clear sbbusy otherwise debug module gets stuck
    riscv dmi_write 0x10 0

    riscv dmi_write 0x38 0x48000
    riscv dmi_write 0x39 0x600b1038
    riscv dmi_write 0x3C 0x10000000

    # clear dmactive to clear sbbusy otherwise debug module gets stuck
    riscv dmi_write 0x10 0
    riscv dmi_write 0x10 0x40000001
    # Here debugger reads dmstatus as 0xc03a2

    # Wait for the reset to happen
    sleep 10
    poll
    # Here debugger reads dmstatus as 0x3a2

    # Disable the watchdogs again
    esp32c6_wdt_disable

    # Here debugger reads anyhalted and allhalted bits as set (0x3a2)
    # We will clean allhalted state by resuming the core.
    riscv dmi_write 0x10 0x40000001

    # Put the hart back into reset state. Note that we need to keep haltreq set.
    riscv dmi_write 0x10 0x80000003
}

proc esp32c6_memprot_is_enabled { } {
	# If IRAM/DRAM split is enabled TOR address match mode is used.
    # If IRAM/DRAM split is disabled NAPOT mode is used.
	# In order to determine if the IRAM/DRAM regions are protected against RWX/RW,
	# it is necessary to first read the mode and then apply the appropriate method for checking.
	# We can understand the mode reading pmp5cfg in pmpcfg1 register.
	# If it is none we know that pmp6cfg and pmp7cfg is in TOR mode.

	# Read pmpcfg1 and extract into 8-bit variables.
	riscv dmi_write 0x17 0x2203a1
	set pmpcfg1 [riscv dmi_read 0x04]

	set pmp5cfg [expr {($pmpcfg1 >> (8 * 1)) & 0xFF}]
	set pmp6cfg [expr {($pmpcfg1 >> (8 * 2)) & 0xFF}]
	set pmp7cfg [expr {($pmpcfg1 >> (8 * 3)) & 0xFF}]

	set IRAM_LOW 	0x40800000
	set IRAM_HIGH 	0x40880000
	set DRAM_LOW 	0x40800000
	set DRAM_HIGH 	0x40880000
	set PMP_RWX     0x07
	set PMP_RW     	0x03
	set PMP_A		[expr {($pmp5cfg >> 3) & 0x03}]

	if {$PMP_A == 0} {
		# TOR mode used to protect valid address space.

		# Read PMPADDR 5-7
		riscv dmi_write 0x17 0x2203b5
		set pmpaddr5 [expr {[riscv dmi_read 0x04] << 2}]
		riscv dmi_write 0x17 0x2203b6
		set pmpaddr6 [expr {[riscv dmi_read 0x04] << 2}]
		riscv dmi_write 0x17 0x2203b7
		set pmpaddr7 [expr {[riscv dmi_read 0x04] << 2}]

		# The lock bit remains unset during the execution of the 2nd stage bootloader.
		# Thus we do not perform a lock bit check for IRAM and DRAM regions.

		# Check OpenOCD can write and execute from IRAM.
		if {$pmpaddr5 >= $IRAM_LOW && $pmpaddr6 <= $IRAM_HIGH} {
			if {($pmp5cfg & $PMP_RWX) != 0 || ($pmp6cfg & $PMP_RWX) != $PMP_RWX} {
				return 1
			}
		}

		# Check OpenOCD can read/write  entire DRAM region.
		if {$pmpaddr7 >= $DRAM_LOW && $pmpaddr7 <= $DRAM_HIGH} {
			if {($pmp7cfg & $PMP_RW) != $PMP_RW} {
				return 1
			}
		}
	} elseif {$PMP_A == 3} {
		# NAPOT mode used to protect valid address space.

		# Read PMPADDR 5
		riscv dmi_write 0x17 0x2203b5
		set pmpaddr5 [expr {[riscv dmi_read 0x04]}]

		# Expected value written to the pmpaddr5
		set pmpaddr_napot [expr {($IRAM_LOW | (($IRAM_HIGH - $IRAM_LOW - 1) >> 1)) >> 2}]
		if {($pmpaddr_napot != $pmpaddr5) ||  ($pmp5cfg & $PMP_RWX) != $PMP_RWX} {
			return 1
		}
	}

	return 0
}

if { $_RTOS == "none" } {
    target create $_TARGETNAME esp32c6 -chain-position $_TAPNAME
} else {
    target create $_TARGETNAME esp32c6 -chain-position $_TAPNAME -rtos $_RTOS
}

$_TARGETNAME configure -event reset-assert-post { esp32c6_soc_reset }
$_TARGETNAME configure -event halted {
    esp32c6_wdt_disable
    esp halted_event_handler
}

$_TARGETNAME configure -event examine-end {
    # Need this to handle 'apptrace init' syscall correctly because semihosting is not enabled by default
    arm semihosting enable
    arm semihosting_resexit enable
    if { [info exists _SEMIHOST_BASEDIR] } {
        if { $_SEMIHOST_BASEDIR != "" } {
            arm semihosting_basedir $_SEMIHOST_BASEDIR
        }
    }
}

$_TARGETNAME configure -event gdb-detach {
	$_TARGETNAME esp gdb_detach_handler
}

$_TARGETNAME configure -event gdb-attach {
    # 'halt' is necessary to auto-probe flash bank when GDB is connected and generate proper memory map
    halt 1000
    if { [esp32c6_memprot_is_enabled] } {
        # 'reset halt' to disable memory protection and allow flasher to work correctly
        echo "Memory protection is enabled. Reset target to disable it..."
        reset halt
    }
    # by default mask interrupts while stepping
    riscv set_maskisr steponly
}

# stub flasher may need a lot of memory in case of compressed writes to flash (~107KB):
# - for apptrace: 2x16KB up buffers + 32KB down buffer
# - for uncompression: 32KB for unzip buffer size + 11KB for inflator data structs
# TODO: In general when up buffers are swapped apptrace copies `host->target` data from new up buffer to down buffer to free space for `target->host` data.
# In case of flash writes we use apptrace transfers in one direction only. So we can avoid copying and re-use up buffer instead of down one.
configure_esp_workarea $_TARGETNAME 0x40800000 0x4000 0x40804000 0x20000
configure_esp_flash_bank $_TARGETNAME $_TARGETNAME $_FLASH_SIZE

if { $_FLASH_SIZE == 0 } {
	gdb_breakpoint_override hard
}

riscv set_reset_timeout_sec 2
riscv set_command_timeout_sec 5
riscv set_mem_access sysbus progbuf abstract
riscv set_ebreakm on
riscv set_ebreaks on
riscv set_ebreaku on
