.submodules_mirror_update_snippet: &submodules_mirror_update_snippet |
  # Gitlab doesn't clean submodule contents
  git submodule foreach "git clean -d -x -f" || true
  # Use local mirror for submodules
  git config submodule.tools/git2cl.url https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/idf/git2cl.git
  git config submodule.jimtcl.url https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/idf/jimtcl.git
  git config submodule.src/jtag/drivers/libjaylink.url https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/idf/libjaylink.git
  git submodule update --init

.submodules_mirror_update:
  script:
    - *submodules_mirror_update_snippet


.export_toolchain_snippet: &export_toolchain_snippet |
  echo "TOOLCHAIN_PREFIX: ${TOOLCHAIN_PREFIX}"
  echo "ESP_TOOLCHAIN: ${ESP_TOOLCHAIN}"
  echo "ESP_GDB_TOOLCHAIN: ${ESP_GDB_TOOLCHAIN}"
  if [ ! -z "$ESP_TOOLCHAIN" ]; then
    export PATH=${HOME}/.espressif/tools/${TOOLCHAIN_PREFIX}-elf/${ESP_TOOLCHAIN}/${TOOLCHAIN_PREFIX}-elf/bin:${PATH}
  fi
  if [ ! -z "$ESP_GDB_TOOLCHAIN" ]; then
    export PATH=${HOME}/.espressif/tools/${ESP_GDB_TOOLCHAIN}/bin:${PATH}
  fi
  if [[ ! -z "$TRIGGERED_BY_GDB_PIPELINE_BRANCH" && -d "${CI_PROJECT_DIR}/gdb" ]]; then
    if [[ "${PLATFORM_NAME:-unknown}" == "linux-armhf-test" ]]; then
        export PATH=${CI_PROJECT_DIR}/gdb/riscv32-esp-elf-gdb_armhf/bin:${PATH}
        export PATH=${CI_PROJECT_DIR}/gdb/xtensa-esp-elf-gdb_armhf/bin:${PATH}
    elif [[ "${PLATFORM_NAME:-unknown}" == "linux-arm64-test" ]]; then
        export PATH=${CI_PROJECT_DIR}/gdb/riscv32-esp-elf-gdb_arm64/bin:${PATH}
        export PATH=${CI_PROJECT_DIR}/gdb/xtensa-esp-elf-gdb_arm64/bin:${PATH}
    fi
  fi
  if [ ! -z "$ESP_GCOV_TOOLCHAIN" ]; then
    wget --no-cache --no-verbose https://dl.espressif.com/dl/${ESP_TOOLCHAIN}-gcov.tar.gz
    tar -xf ${ESP_TOOLCHAIN}-gcov.tar.gz
    export PATH=${ESP_GCOV_TOOLCHAIN}/${TOOLCHAIN_PREFIX}-elf/bin:${PATH}
  fi
  echo "PATH: ${PATH}"

.export_toolchain:
  script:
    - *export_toolchain_snippet

.run_tests_linux_snippet: &run_tests_linux_snippet |
  ARCHIVE_NAME=$(cat ${DIST_ART_DIR}/dist_name_${PLATFORM_NAME})
  tar -C ${TEST_RUN_DIR} -x -m -f ${DIST_ART_DIR}/${ARCHIVE_NAME}
  export DIST_DIR=${PWD}/${TEST_RUN_DIR}/${DIST_INSTALLED_DIR}
  export PYTHONPATH=$PWD/${TEST_RUN_DIR}:$PWD/testing/esp/py_debug_backend
  echo "CHIP_TEST_TOOLCHAIN: ${CHIP_TEST_TOOLCHAIN}"
  set +e
  testing/esp/run_tests.py -o $DIST_DIR/bin/openocd -s $DIST_DIR/share/openocd/scripts -a $PWD/$TEST_RUN_DIR -t ${CHIP_TEST_TOOLCHAIN}-elf- -d 4 -l $PWD/$TEST_RUN_DIR/debug_backend_tests.log -tr x -to $PWD/$TEST_RUN_DIR/results $TEST_RUN_EXTRA_OPTS -c "${OOCD_CMDS}" -u $ESPTOOL_PORT || exit $?
  if [[ $SCHEDULE_TYPE == "run_sanitizer_tests" ]] ; then
    grep -i -e".*sanitizer" -e"runtime error" ${TEST_RUN_DIR}/debug_backend_tests.log > ${TEST_RUN_DIR}/sanitizer_errors.log || true
    # fail if `sanitizer_errors.log` is not empty
    [[ ! -s ${TEST_RUN_DIR}/sanitizer_errors.log ]]
  fi

.run_tests_linux:
  script:
    - *run_tests_linux_snippet

.copy_nuttx_files_snippet: &copy_nuttx_files_snippet |
  mv nuttx.merged.bin $TEST_RUN_DIR/$NUTTX_APP_NAME/$NUTTX_APP_NAME.bin
  mv nuttx $TEST_RUN_DIR/$NUTTX_APP_NAME/$NUTTX_APP_NAME.elf

.copy_nuttx_files:
  script:
    - *copy_nuttx_files_snippet
