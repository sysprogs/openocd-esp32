.get_release_name: &get_release_name |
  PREFX=${CI_PROJECT_NAME}
  tmpVER=$( tmpTAG=$(git describe --tags | grep -E "^v[0-9]") && ( echo $tmpTAG | sed -n -r "s|^v(.*)|\1|gp" ) || echo "" )
  if [ ! $tmpVER ]; then
    tmpVER=$( tmpTAG=$(git describe --tags | grep -E "^${PREFX}-")  && ( echo $tmpTAG | sed -n -r "s|^${PREFX}-(.*)|\1|gp" ) || echo "" )
    if [ ! $tmpVER ]; then
      echo "There is not a correct tag"; exit 1
    fi
  fi
  REL_VERSION=$tmpVER
  REL_NAME=${CI_PROJECT_NAME}-${PLATFORM_NAME}-${REL_VERSION}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_VERSION: $REL_VERSION"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

.dist_archive: &dist_archive |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${DIST_INSTALLED_DIR}
  mkdir -p ${DIST_ART_DIR}
  mv ${ARCHIVE_NAME} ${DIST_ART_DIR}
  echo "${ARCHIVE_NAME}" > ${DIST_ART_DIR}/dist_name_${PLATFORM_NAME}

.buildx_libusb: &buildx_libusb |
  export LIBUSB_VER=libusb-1.0.26
  wget https://dl.espressif.com/dl/$LIBUSB_VER.tar.gz -O $LIBUSB_VER.tar.gz
  tar xzf $LIBUSB_VER.tar.gz && rm $LIBUSB_VER.tar.gz
  pushd $LIBUSB_VER
  ./bootstrap.sh
  ./configure --prefix=$PWD/dist --host=${CONF_HOST} --enable-shared=no --enable-static=yes CC=${HOST_CC}
  make
  MAKEFLAGS= make ${INSTALL_TARGET}
  export LIBUSB_INCLUDE_DIR=$PWD/dist/include/libusb-1.0
  export LIBUSB_LIBRARIES=$PWD/dist/lib/libusb-1.0.a
  popd

.buildx_hidapi: &buildx_hidapi |
  export HIDAPI_VER=hidapi-0.14.0
  wget https://dl.espressif.com/dl/hidapi-$HIDAPI_VER.tar.gz -O $HIDAPI_VER.tar.gz
  tar xzf $HIDAPI_VER.tar.gz && rm $HIDAPI_VER.tar.gz
  pushd hidapi-$HIDAPI_VER
  ./bootstrap
  ./configure --prefix=$PWD/dist --host=${CONF_HOST} --enable-shared=no --enable-static=yes --disable-testgui CC=${HOST_CC} CFLAGS=-std=gnu99
  make
  MAKEFLAGS= make install
  popd

# TODO: just for boilerplate. Not tested on windows and macos yet.
.buildx_libftdi: &buildx_libftdi |
  export LIBFTDI_VER=libftdi1-1.5
  wget https://dl.espressif.com/dl/${LIBFTDI_VER}.tar.bz2
  tar -xjf ${LIBFTDI_VER}.tar.bz2 && rm ${LIBFTDI_VER}.tar.bz2
  pushd $LIBFTDI_VER
  DIST_PATH=$(printf '%s\n' "$PWD/dist" | sed -e 's/[\/&]/\\&/g')
  sed -i -E "s/(SET\(CMAKE_FIND_ROOT_PATH\s+).+\)/\1${DIST_PATH})/" cmake/Toolchain-${CONF_HOST}.cmake
  export LIBFTDI_CONFIG="-DSTATICLIBS=OFF -DEXAMPLES=OFF -DFTDI_EEPROM=OFF"
  cmake $LIBFTDI_CONFIG -DLIBUSB_INCLUDE_DIR=$LIBUSB_INCLUDE_DIR -DLIBUSB_LIBRARIES=$LIBUSB_LIBRARIES -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-${CONF_HOST}.cmake -DCMAKE_INSTALL_PREFIX=${PWD}/dist
  make
  make install
  popd

.buildx_zlib: &buildx_zlib |
  export ZLIB_VER=zlib-1.2.11
  wget https://dl.espressif.com/dl/$ZLIB_VER.tar.xz -O $ZLIB_VER.tar.xz
  tar xf $ZLIB_VER.tar.xz && rm $ZLIB_VER.tar.xz
  pushd $ZLIB_VER
  make -f win32/Makefile.gcc BINARY_PATH=$PWD/dist/bin INCLUDE_PATH=$PWD/dist/include LIBRARY_PATH=$PWD/dist/lib SHARED_MODE=1 PREFIX=${CONF_HOST}- install
  export CPPFLAGS="-I$PWD/dist/include"
  export ZLIB_LDFLAGS="-L$PWD/dist/lib"
  popd

.buildx_libjaylink: &buildx_libjaylink |
  export LIBJAYLINK_VER=libjaylink-0.3.1
  wget https://dl.espressif.com/dl/$LIBJAYLINK_VER.tar.gz -O $LIBJAYLINK_VER.tar.gz
  tar xzf $LIBJAYLINK_VER.tar.gz && rm $LIBJAYLINK_VER.tar.gz
  pushd $LIBJAYLINK_VER
  ./autogen.sh
  ./configure --prefix=$PWD/dist --host=${CONF_HOST} --disable-shared CC=${HOST_CC}
  make
  make install
  popd

.buildx_openocd: &buildx_openocd |
  ./bootstrap
  mkdir _build && pushd _build/
  ../configure --prefix=$PWD/../$DIST_INSTALLED_DIR --host=${CONF_HOST} $OPENOCD_CONFIGURE_OPTS CC=${HOST_CC}
  make -j `nproc`
  MAKEFLAGS= make ${INSTALL_TARGET}
  popd

.build_linux_arm_template:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross:3
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    reports:
      junit:
        - _build/*.log
    when: always
    expire_in: 2 weeks
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - mkdir _build && pushd _build/
    - ../configure CFLAGS="${TEST_CFLAGS}" --prefix=$PWD/../$DIST_INSTALLED_DIR --host=${CONF_HOST}  $OPENOCD_CONFIGURE_OPTS $GCOV_BUILD_OPTS
    - make -j `nproc`
    - MAKEFLAGS= make install-strip
    - popd
    - >
      if [[ "${GCOV_BUILD_OPTS}" != "" ]]; then
        echo coverage enabled
        rsync -a --prune-empty-dirs --include '*/' --include '*.gcno' --exclude '*' _build/ ${DIST_INSTALLED_DIR}/_build
      fi
    - *dist_archive

.build_macos_template: &build_macos_template
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-macos-cross:4
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - *buildx_libusb
    - export OSXCROSS_PKG_CONFIG_PATH=$PWD/$LIBUSB_VER/dist/lib/pkgconfig
    - *buildx_hidapi
    - *buildx_libjaylink
    - export OSXCROSS_PKG_CONFIG_PATH=$PWD/hidapi-$HIDAPI_VER/dist/lib/pkgconfig/:$PWD/$LIBJAYLINK_VER/dist/lib/pkgconfig:$OSXCROSS_PKG_CONFIG_PATH
    - export LDFLAGS="-Wl,-framework,CoreFoundation -Wl,-framework,IOKit -Wl,-framework,Security"
    - *buildx_openocd
    - *dist_archive

build_linux:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  variables:
    PLATFORM_NAME: "linux-amd64"
    CONF_HOST: "x86_64-linux-gnu"
    HOST_CC: ${CONF_HOST}-gcc
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - apt-get update || true
    - apt-get install systemd libudev-dev --force-yes -y # needed for hidapi build
    - *buildx_hidapi
    - *buildx_libjaylink
    - export PKG_CONFIG_PATH=$PWD/hidapi-$HIDAPI_VER/dist/lib/pkgconfig/:$PWD/$LIBJAYLINK_VER/dist/lib/pkgconfig
    - ./bootstrap
    - mkdir _build
    - pushd _build/
    - ../configure --prefix=$PWD/../$DIST_INSTALLED_DIR $OPENOCD_CONFIGURE_OPTS
    - make -j `nproc`
    - src/openocd --version 2>&1 | { ! grep 'dirty'; }
    - MAKEFLAGS= make install-strip
    - popd
    - *dist_archive

# Just to test build with latest gcc.
build_linux_gcc_latest:
  stage: build_openocd
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - ./configure ${OPENOCD_CONFIGURE_OPTS}
    - make -j`nproc`

build_linux_armhf_test:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf-test"
    TEST_CFLAGS: ""
    GCOV_BUILD_OPTS: "--enable-build-gcov"

build_linux_armhf_sanitizer_test:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf-test"
    TEST_CFLAGS: "-Wl,--no-as-needed -ldl -fsanitize=address -fsanitize=undefined -fsanitize-recover=address -ggdb3"

build_linux_armhf:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf"
    TEST_CFLAGS: ""

build_linux_armel:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabi"
    PLATFORM_NAME: "linux-armel"
    TEST_CFLAGS: ""

build_linux_arm64:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "aarch64-linux-gnu"
    PLATFORM_NAME: "linux-arm64"
    TEST_CFLAGS: ""

build_windows:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  variables:
    CONF_HOST: "i686-w64-mingw32"
    PLATFORM_NAME: "win32"
    ARCHIVE_TOOL: "zip -r"
    ARCHIVE_EXT: "zip"
    INSTALL_TARGET: "install-strip"
    HOST_CC: ${CONF_HOST}-gcc
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - *buildx_libusb
    - export PKG_CONFIG_PATH=$PWD/$LIBUSB_VER/dist/lib/pkgconfig
    - *buildx_hidapi
    - *buildx_libjaylink
    - *buildx_zlib
    - export PKG_CONFIG_PATH=$PWD/hidapi-$HIDAPI_VER/dist/lib/pkgconfig/:$PWD/$LIBJAYLINK_VER/dist/lib/pkgconfig:$PKG_CONFIG_PATH
    - export LDFLAGS=$ZLIB_LDFLAGS
    - *buildx_openocd
    - cp $PWD/${ZLIB_VER}/dist/bin/zlib1.dll $DIST_INSTALLED_DIR/bin/
    - *dist_archive

build_macos:
  <<: *build_macos_template
  variables:
    PLATFORM_NAME: "macos"
    CONF_HOST: "x86_64-apple-darwin21.1"
    INSTALL_TARGET: "install-strip"
    HOST_CC: ${CONF_HOST}-cc

build_macos_arm64:
  <<: *build_macos_template
  variables:
    PLATFORM_NAME: "macos-arm64"
    CONF_HOST: "aarch64-apple-darwin21.1"
    INSTALL_TARGET: "install"
    HOST_CC: ${CONF_HOST}-cc

scan-build:
  stage: static_analyzers
  tags:
    - build
  allow_failure: true
  variables:
    SCAN_BUILD_OUTPUT: "report"
  artifacts:
    paths:
      - ${SCAN_BUILD_OUTPUT}
      - scanbuild_reference.html
    when: always
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - mkdir build-scanbuild
    - pushd build-scanbuild
    - scan-build ../configure
    - scan-build -o out make -j`nproc` CFLAGS="-std=gnu99 -I. -I../../jimtcl"
    - popd
    - ${ARCHIVE_TOOL} scan_build.${ARCHIVE_EXT} build-scanbuild/out
    - mkdir -p ${SCAN_BUILD_OUTPUT}
    - mv scan_build.${ARCHIVE_EXT} ${SCAN_BUILD_OUTPUT}
    - cp build-scanbuild/out/*/index.html scanbuild_reference.html
    - apt-get update && apt-get install pip && pip install beautifulsoup4
    - SCANBUILD_REF_FILE="tools/scanbuild_reference.txt"
    - SCANBUILD_OUT_FILE="scanbuild_report.txt"
    - python3 tools/scanbuild_parser.py -i scanbuild_reference.html -o $SCANBUILD_OUT_FILE
    - python3 tools/scanbuild_parser.py -i tools/scanbuild_reference.html -o $SCANBUILD_REF_FILE
    - ./tools/compare_static_analyzer_files.sh $SCANBUILD_OUT_FILE $SCANBUILD_REF_FILE

sparse:
  stage: static_analyzers
  tags:
    - build
  allow_failure: true
  variables:
    SPARSE_BUILD_OUTDIR: "sparse"
    SPARSE_BUILD_OUTFILE: "warnings.log"
  artifacts:
    paths:
      - ${SPARSE_BUILD_OUTDIR}
      - sparse_reference.log
    when: always
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - apt-get update && apt-get install sparse
    - ./bootstrap
    - mkdir build-sparse && pushd build-sparse
    - ../configure CC=cgcc CFLAGS="-Wsparse-all -Wno-declaration-after-statement -Wno-unknown-attribute -Wno-transparent-union -Wno-tautological-compare -Wno-vla -Wno-flexible-array-array -D__FLT_EVAL_METHOD__=0"
    - ((make -j`nproc`) 1> >(tee make.log)) 2> >(tee ${SPARSE_BUILD_OUTFILE} 2>&2)
    - echo $(wc -l < ${SPARSE_BUILD_OUTFILE}) "sparse warning found"
    - popd
    - ${ARCHIVE_TOOL} sparse_out.${ARCHIVE_EXT} build-sparse/${SPARSE_BUILD_OUTFILE}
    - mkdir -p ${SPARSE_BUILD_OUTDIR}
    - mv sparse_out.${ARCHIVE_EXT} ${SPARSE_BUILD_OUTDIR}
    - SPARSE_REF_FILE="tools/sparse_reference.log"
    - ./tools/compare_static_analyzer_files.sh build-sparse/${SPARSE_BUILD_OUTFILE} $SPARSE_REF_FILE sparse_reference.log

build_linux_cmake:
  stage: build_openocd
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -G Ninja
    - ninja

# TODO: enable after updating CMake version in the docker image
.build_linux_armhf_cmake:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross:3
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=cmake/cross/linux-armhf.cmake
    - make

# TODO: enable after updating CMake version in the docker image
.build_windows_cmake:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=cmake/cross/mingw32.cmake
    - make
