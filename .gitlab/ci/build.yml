.get_release_name: &get_release_name |
  PREFX=${CI_PROJECT_NAME}
  tmpVER=$( tmpTAG=$(git describe --tags | grep -E "^v[0-9]") && ( echo $tmpTAG | sed -n -r "s|^v(.*)|\1|gp" ) || echo "" )
  if [ ! $tmpVER ]; then
    tmpVER=$( tmpTAG=$(git describe --tags | grep -E "^${PREFX}-")  && ( echo $tmpTAG | sed -n -r "s|^${PREFX}-(.*)|\1|gp" ) || echo "" )
    if [ ! $tmpVER ]; then
      echo "There is not a correct tag"; exit 1
    fi
  fi
  REL_VERSION=$tmpVER
  REL_NAME=${CI_PROJECT_NAME}-${PLATFORM_NAME}-${REL_VERSION}
  ARCHIVE_NAME=${REL_NAME}.${ARCHIVE_EXT}
  echo "PLATFORM_NAME: $PLATFORM_NAME"
  echo "REL_VERSION: $REL_VERSION"
  echo "REL_NAME: $REL_NAME"
  echo "ARCHIVE_NAME: $ARCHIVE_NAME"

.dist_archive: &dist_archive |
  ${ARCHIVE_TOOL} ${ARCHIVE_NAME} ${DIST_INSTALLED_DIR}
  mkdir -p ${DIST_ART_DIR}
  mv ${ARCHIVE_NAME} ${DIST_ART_DIR}
  echo "${ARCHIVE_NAME}" > ${DIST_ART_DIR}/dist_name_${PLATFORM_NAME}

.build_linux_arm_template:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross:3
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    reports:
      junit:
        - _build/*.log
    when: always
    expire_in: 2 weeks
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - mkdir _build
    - pushd _build/
    - ../configure CFLAGS="${TEST_CFLAGS}" --prefix=$PWD/../$DIST_INSTALLED_DIR --host=${CONF_HOST}  $OPENOCD_CONFIGURE_OPTS $GCOV_BUILD_OPTS
    - make
    - MAKEFLAGS= make install-strip
    - popd
    - >
      if [[ "${GCOV_BUILD_OPTS}" != "" ]]; then
        echo coverage enabled
        rsync -a --prune-empty-dirs --include '*/' --include '*.gcno' --exclude '*' _build/ ${DIST_INSTALLED_DIR}/_build
      fi
    - *dist_archive

.build_macos_template: &build_macos_template
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-macos-cross:4
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]

    # Cross-compile libusb-1.0 for OSX
    - export LIBUSB_VER=libusb-1.0.26
    - wget https://dl.espressif.com/dl/$LIBUSB_VER.tar.gz -O $LIBUSB_VER.tar.gz
    - tar xzf $LIBUSB_VER.tar.gz && rm $LIBUSB_VER.tar.gz
    - pushd $LIBUSB_VER
    - ./bootstrap.sh
    - ./configure --prefix=$PWD/dist --host=${CONF_HOST} --enable-shared=no --enable-static=yes CC=${CONF_HOST}-cc
    - make
    - make install
    - popd

    # Finally, cross-compile OpenOCD
    - export OSXCROSS_PKG_CONFIG_PATH=$PWD/$LIBUSB_VER/dist/lib/pkgconfig
    - ./bootstrap
    - mkdir _build
    - pushd _build/
    - ../configure --prefix=$PWD/../$DIST_INSTALLED_DIR --host=${CONF_HOST} $OPENOCD_CONFIGURE_OPTS LDFLAGS="-Wl,-framework,CoreFoundation -Wl,-framework,IOKit -Wl,-framework,Security" CC=${CONF_HOST}-cc
    - make
    - MAKEFLAGS= make ${INSTALL_TARGET}
    - popd
    - *dist_archive

build_linux:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  variables:
    PLATFORM_NAME: "linux-amd64"
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - mkdir _build
    - pushd _build/
    - ../configure --prefix=$PWD/../$DIST_INSTALLED_DIR $OPENOCD_CONFIGURE_OPTS
    - make
    - src/openocd --version 2>&1 | { ! grep 'dirty'; }
    - MAKEFLAGS= make install-strip
    - popd
    - *dist_archive

# do not distribute! Just for build error check with the latest gcc
build_linux_gcc_latest:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/openocd-ci-env:1
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - ./configure ${OPENOCD_CONFIGURE_OPTS}
    - make -j8

build_linux_armhf_test:
  extends: .build_linux_arm_template
  except:
    refs:
      - schedules
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf-test"
    TEST_CFLAGS: ""
    GCOV_BUILD_OPTS: "--enable-build-gcov"
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

build_linux_armhf_sanitizer_test:
  extends: .build_linux_arm_template
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_TYPE == "build_sanitizer_test"
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf-test"
    TEST_CFLAGS: "-Wl,--no-as-needed -ldl -fsanitize=address -fsanitize=undefined -fsanitize-recover=address -ggdb3"

build_linux_armhf:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabihf"
    PLATFORM_NAME: "linux-armhf"
    TEST_CFLAGS: ""
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

build_linux_armel:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "arm-linux-gnueabi"
    PLATFORM_NAME: "linux-armel"
    TEST_CFLAGS: ""
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

build_linux_arm64:
  extends: .build_linux_arm_template
  variables:
    CONF_HOST: "aarch64-linux-gnu"
    PLATFORM_NAME: "linux-arm64"
    TEST_CFLAGS: ""
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

build_windows:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  tags:
    - build
  artifacts:
    paths:
      - ${DIST_ART_DIR}
    expire_in: 2 weeks
  variables:
    CONF_HOST: "i686-w64-mingw32"
    PLATFORM_NAME: "win32"
    ARCHIVE_TOOL: "zip -r"
    ARCHIVE_EXT: "zip"
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"
  needs:
    - job: style_check
  script:
    - *get_release_name
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    # Build libusb-1.0
    - export LIBUSB_VER=libusb-1.0.26
    - wget https://dl.espressif.com/dl/$LIBUSB_VER.tar.gz -O $LIBUSB_VER.tar.gz
    - tar xzf $LIBUSB_VER.tar.gz && rm $LIBUSB_VER.tar.gz
    - pushd $LIBUSB_VER
    - ./bootstrap.sh
    - ./configure --prefix=$PWD/dist --host=${CONF_HOST} --enable-shared=no --enable-static=yes
    - make
    - make install-strip
    - export PKG_CONFIG_PATH=$PWD/dist/lib/pkgconfig
    - popd
    # Build zlib-1.2.11
    - export ZLIB_VER=zlib-1.2.11
    - wget https://dl.espressif.com/dl/$ZLIB_VER.tar.xz -O $ZLIB_VER.tar.xz
    - tar xf $ZLIB_VER.tar.xz && rm $ZLIB_VER.tar.xz
    - pushd $ZLIB_VER
    - mkdir _build
    - INSTALLDIR=_build
    - make -f win32/Makefile.gcc BINARY_PATH=$INSTALLDIR/bin INCLUDE_PATH=$INSTALLDIR/include LIBRARY_PATH=$INSTALLDIR/lib SHARED_MODE=1 PREFIX=${CONF_HOST}- install
    - export CPPFLAGS="-I$PWD/$INSTALLDIR/include"
    - export LDFLAGS="-L$PWD/$INSTALLDIR/lib"
    - export ZLIB_DIR=$PWD/$INSTALLDIR/bin
    - popd
    # Build OpenOCD
    - git submodule update --init
    - ./bootstrap
    - mkdir _build
    - pushd _build/
    - ../configure --prefix=$PWD/../$DIST_INSTALLED_DIR --host=${CONF_HOST} $OPENOCD_CONFIGURE_OPTS
    - make
    - MAKEFLAGS= make install-strip
    - popd
    - cp ${ZLIB_DIR}/zlib1.dll $DIST_INSTALLED_DIR/bin/
    - *dist_archive

build_macos:
  <<: *build_macos_template
  variables:
    PLATFORM_NAME: "macos"
    CONF_HOST: "x86_64-apple-darwin21.1"
    INSTALL_TARGET: "install-strip"
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

build_macos_arm64:
  <<: *build_macos_template
  variables:
    PLATFORM_NAME: "macos-arm64"
    CONF_HOST: "aarch64-apple-darwin21.1"
    INSTALL_TARGET: "install"
    OPENOCD_CONFIGURE_OPTS: "--enable-remote-bitbang"

scan-build:
  stage: scan_build
  image: $CI_DOCKER_REGISTRY/openocd-ci-env:1
  tags:
    - build
  allow_failure: true
  variables:
    SCAN_BUILD_OUTPUT: "report"
  artifacts:
    paths:
      - ${SCAN_BUILD_OUTPUT}
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - ./bootstrap
    - mkdir build-scanbuild
    - pushd build-scanbuild
    - scan-build ../configure
    - scan-build -o out make -j8 CFLAGS="-std=gnu99 -I. -I../../jimtcl"
    - popd
    - ${ARCHIVE_TOOL} scan_build.${ARCHIVE_EXT} build-scanbuild/out
    - mkdir -p ${SCAN_BUILD_OUTPUT}
    - mv scan_build.${ARCHIVE_EXT} ${SCAN_BUILD_OUTPUT}

build_linux_cmake:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/openocd-ci-env:1
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -G Ninja
    - ninja

# TODO: enable after updating CMake version in the docker image
.build_linux_armhf_cmake:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-arm-cross:3
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=cmake/cross/linux-armhf.cmake
    - make

# TODO: enable after updating CMake version in the docker image
.build_windows_cmake:
  stage: build_openocd
  image: $CI_DOCKER_REGISTRY/esp32-toolchain-win-cross
  tags:
    - build
  allow_failure: true
  needs:
    - job: style_check
  variables:
    OPENOCD_CMAKE_CONFIGURE_OPTS: ""
  script:
    - !reference [.add_gitlab_key, script]
    - !reference [.submodules_mirror_update, script]
    - mkdir build && cd build
    - cmake .. -DCMAKE_TOOLCHAIN_FILE=cmake/cross/mingw32.cmake
    - make
